import fetch from 'node-fetch';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API –∏ —Ç–æ–∫–µ–Ω–æ–≤
const JUPITER_API_URL = 'https://quote-api.jup.ag/v6/quote';
const SOL = 'So11111111111111111111111111111111111111112';
const USDC = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v';

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
const MIN_PROFIT_PERCENT = 0.5;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
interface MarketInfo {
  id?: string;
  label?: string;
  ammKey?: string;
  inputMint?: string;
  outputMint?: string;
  inAmount?: string;
  outAmount?: string;
  feeAmount?: string;
  feeMint?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –æ–±–º–µ–Ω–∞
interface RoutePlan {
  swapInfo: MarketInfo;
  percent: number;
}

// –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ Jupiter API
interface JupiterQuoteResponse {
  inputMint: string;
  inAmount: string;
  outputMint: string;
  outAmount: string;
  otherAmountThreshold: string;
  swapMode: string;
  slippageBps: number;
  priceImpactPct: string;
  routePlan: RoutePlan[];
  contextSlot: number;
  timeTaken: number;
  error?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
interface TokenInfo {
  symbol: string;
  address: string;
  decimals: number;
}

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
const TOKENS = {
  SOL: {
    symbol: 'SOL',
    address: SOL,
    decimals: 9
  },
  USDC: {
    symbol: 'USDC',
    address: USDC,
    decimals: 6
  }
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
interface ArbitrageOpportunity {
  startToken: TokenInfo;
  middleToken: TokenInfo;
  startAmount: number;
  startAmountNative: number;
  middleAmount: number;
  middleAmountNative: number;
  finalAmount: number;
  finalAmountNative: number;
  profitAmount: number;
  profitPercent: number;
  totalFees: number;
  firstQuote: JupiterQuoteResponse;
  secondQuote: JupiterQuoteResponse;
  timestamp: number;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Jupiter API
 * @param inputMint –ê–¥—Ä–µ—Å –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
 * @param outputMint –ê–¥—Ä–µ—Å –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
 * @param amount –°—É–º–º–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (—Å —É—á–µ—Ç–æ–º decimals)
 * @param slippageBps –î–æ–ø—É—Å—Ç–∏–º–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö (1 bps = 0.01%)
 * @param retries –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @returns –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
async function getQuote(
  inputMint: string,
  outputMint: string,
  amount: number,
  slippageBps: number = 50, // 0.5% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
  retries: number = 3
): Promise<JupiterQuoteResponse | null> {
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
  const url = `${JUPITER_API_URL}?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${slippageBps}`;

  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–æ retries —Ä–∞–∑
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
      const response = await fetch(url);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (!response.ok) {
        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
      const data = await response.json() as JupiterQuoteResponse;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
      if (data.error) {
        console.error(`Jupiter API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${data.error}`);
        if (attempt < retries) {
          await new Promise(r => setTimeout(r, 1000));
          continue;
        }
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ outAmount –≤ –æ—Ç–≤–µ—Ç–µ
      if (!data.outAmount) {
        console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç –æ–±–º–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries})`);
        if (attempt < retries) {
          await new Promise(r => setTimeout(r, 1000));
          continue;
        }
        return null;
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
      return data;
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}):`, error);
      
      if (attempt < retries) {
        await new Promise(r => setTimeout(r, 1000));
      }
    }
  }
  
  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`);
  return null;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–π –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ –æ–±–º–µ–Ω–∞ –≤ USD
 * @param quote –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º –æ–±–º–µ–Ω–∞
 * @returns –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π –≤ USD
 */
function calculateFees(quote: JupiterQuoteResponse): number {
  if (!quote.routePlan || quote.routePlan.length === 0) {
    return 0;
  }
  
  let totalFees = 0;
  
  for (const { swapInfo } of quote.routePlan) {
    if (swapInfo.feeAmount && swapInfo.feeMint) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –µ–≥–æ decimals
      const isUSDC = swapInfo.feeMint === USDC;
      const isSOL = swapInfo.feeMint === SOL;
      const feeDecimals = isSOL ? 9 : 6;
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–∏ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      const feeValue = parseInt(swapInfo.feeAmount) / Math.pow(10, feeDecimals);
      
      // –ï—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏—è –≤ USDC, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫ –æ–±—â–µ–π —Å—É–º–º–µ
      if (isUSDC) {
        totalFees += feeValue;
      }
      // TODO: –µ—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏—è –≤ SOL, –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ USD
    }
  }
  
  return totalFees;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ —Å—Ö–µ–º–µ A->B->A
 * @param startToken –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω (A)
 * @param middleToken –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω (B) 
 * @param startAmount –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 SOL)
 * @returns –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ null, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏—Ç –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
 */
async function checkArbitrageOpportunity(
  startToken: TokenInfo,
  middleToken: TokenInfo,
  startAmount: number
): Promise<ArbitrageOpportunity | null> {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: ${startToken.symbol} -> ${middleToken.symbol} -> ${startToken.symbol}`);
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —É—á–µ—Ç–æ–º decimals
  const startAmountNative = Math.floor(startAmount * Math.pow(10, startToken.decimals));
  
  // –®–∞–≥ 1: A -> B (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOL -> USDC)
  console.log(`üîÑ –®–∞–≥ 1: –û–±–º–µ–Ω ${startAmount} ${startToken.symbol} -> ${middleToken.symbol}`);
  
  const firstQuote = await getQuote(startToken.address, middleToken.address, startAmountNative);
  if (!firstQuote) {
    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è ${startToken.symbol} -> ${middleToken.symbol}`);
    return null;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É middleToken –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ–±–º–µ–Ω–∞
  const middleAmountNative = parseInt(firstQuote.outAmount);
  const middleAmount = middleAmountNative / Math.pow(10, middleToken.decimals);
  
  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: ${middleAmount.toFixed(middleToken.decimals)} ${middleToken.symbol}`);
  
  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DEX –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ–±–º–µ–Ω–∞
  if (firstQuote.routePlan && firstQuote.routePlan.length > 0) {
    const dexInfo: Record<string, number> = {};
    for (const route of firstQuote.routePlan) {
      const dexName = route.swapInfo.label || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π DEX';
      dexInfo[dexName] = (dexInfo[dexName] || 0) + route.percent;
    }
    
    console.log(`   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ DEX: ${Object.entries(dexInfo)
      .map(([name, percent]) => `${name} (${percent}%)`)
      .join(', ')}`);
  }
  
  // –®–∞–≥ 2: B -> A (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDC -> SOL)
  console.log(`üîÑ –®–∞–≥ 2: –û–±–º–µ–Ω ${middleAmount.toFixed(middleToken.decimals)} ${middleToken.symbol} -> ${startToken.symbol}`);
  
  const secondQuote = await getQuote(middleToken.address, startToken.address, middleAmountNative);
  if (!secondQuote) {
    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è ${middleToken.symbol} -> ${startToken.symbol}`);
    return null;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É startToken –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±–º–µ–Ω–∞
  const finalAmountNative = parseInt(secondQuote.outAmount);
  const finalAmount = finalAmountNative / Math.pow(10, startToken.decimals);
  
  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: ${finalAmount.toFixed(startToken.decimals)} ${startToken.symbol}`);
  
  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DEX –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –æ–±–º–µ–Ω–∞
  if (secondQuote.routePlan && secondQuote.routePlan.length > 0) {
    const dexInfo: Record<string, number> = {};
    for (const route of secondQuote.routePlan) {
      const dexName = route.swapInfo.label || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π DEX';
      dexInfo[dexName] = (dexInfo[dexName] || 0) + route.percent;
    }
    
    console.log(`   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ DEX: ${Object.entries(dexInfo)
      .map(([name, percent]) => `${name} (${percent}%)`)
      .join(', ')}`);
  }
  
  // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞
  const profitAmountNative = finalAmountNative - startAmountNative;
  const profitAmount = profitAmountNative / Math.pow(10, startToken.decimals);
  const profitPercent = (profitAmountNative / startAmountNative) * 100;
  
  // –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
  const firstFees = calculateFees(firstQuote);
  const secondFees = calculateFees(secondQuote);
  const totalFees = firstFees + secondFees;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  const opportunity: ArbitrageOpportunity = {
    startToken,
    middleToken,
    startAmount,
    startAmountNative,
    middleAmount,
    middleAmountNative,
    finalAmount,
    finalAmountNative,
    profitAmount,
    profitPercent,
    totalFees,
    firstQuote,
    secondQuote,
    timestamp: Date.now()
  };
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  if (profitPercent > 0) {
    console.log(`üìà –ü—Ä–æ—Ñ–∏—Ç: +${profitAmount.toFixed(startToken.decimals)} ${startToken.symbol} (+${profitPercent.toFixed(4)}%)`);
  } else {
    console.log(`üìâ –£–±—ã—Ç–æ–∫: ${profitAmount.toFixed(startToken.decimals)} ${startToken.symbol} (${profitPercent.toFixed(4)}%)`);
  }
  
  if (totalFees > 0) {
    console.log(`üí∏ –ö–æ–º–∏—Å—Å–∏–∏: ~$${totalFees.toFixed(6)}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏—Ç–∞
  if (profitPercent >= MIN_PROFIT_PERCENT) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å (–ø—Ä–æ—Ñ–∏—Ç > ${MIN_PROFIT_PERCENT}%)!`);
    return opportunity;
  } else {
    console.log(`‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ–≤—ã–≥–æ–¥–µ–Ω (–ø—Ä–æ—Ñ–∏—Ç < ${MIN_PROFIT_PERCENT}%)`);
    return null;
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param opportunity –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
 */
function displayArbitrageOpportunity(opportunity: ArbitrageOpportunity): void {
  console.log('\nüí∞ –ù–ê–ô–î–ï–ù–ê –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨!');
  console.log('==================================================');
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ
  console.log(`üîÑ –ú–∞—Ä—à—Ä—É—Ç: ${opportunity.startToken.symbol} -> ${opportunity.middleToken.symbol} -> ${opportunity.startToken.symbol}`);
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–º–º–∞—Ö –æ–±–º–µ–Ω–∞
  console.log(`\nüìä –î–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞:`);
  console.log(`  ‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${opportunity.startAmount.toFixed(opportunity.startToken.decimals)} ${opportunity.startToken.symbol}`);
  console.log(`  ‚Ä¢ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞: ${opportunity.middleAmount.toFixed(opportunity.middleToken.decimals)} ${opportunity.middleToken.symbol}`);
  console.log(`  ‚Ä¢ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${opportunity.finalAmount.toFixed(opportunity.startToken.decimals)} ${opportunity.startToken.symbol}`);
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏—Ç–µ
  console.log(`\nüíµ –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
  console.log(`  ‚Ä¢ –ü—Ä–æ—Ñ–∏—Ç: +${opportunity.profitAmount.toFixed(opportunity.startToken.decimals)} ${opportunity.startToken.symbol}`);
  console.log(`  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: +${opportunity.profitPercent.toFixed(4)}%`);
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
  console.log(`\nüí∏ –ö–æ–º–∏—Å—Å–∏–∏:`);
  console.log(`  ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–π: ~$${opportunity.totalFees.toFixed(6)}`);
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –æ–±–º–µ–Ω–∞
  console.log(`\nüõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã –æ–±–º–µ–Ω–∞:`);
  
  // –ü–µ—Ä–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: A -> B (SOL -> USDC)
  console.log(`\n  1Ô∏è‚É£ ${opportunity.startToken.symbol} -> ${opportunity.middleToken.symbol}:`);
  if (opportunity.firstQuote.routePlan && opportunity.firstQuote.routePlan.length > 0) {
    // –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ DEX
    const dexSummary: Record<string, { percent: number }> = {};
    
    for (const route of opportunity.firstQuote.routePlan) {
      const dexName = route.swapInfo.label || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π DEX';
      if (!dexSummary[dexName]) {
        dexSummary[dexName] = { percent: 0 };
      }
      dexSummary[dexName].percent += route.percent;
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ –º–∞—Ä—à—Ä—É—Ç–∞
      console.log(`    ‚Ä¢ ${dexName} (${route.percent}%):`);
      
      if (route.swapInfo.inAmount && route.swapInfo.outAmount) {
        const inDecimals = opportunity.startToken.decimals;
        const outDecimals = opportunity.middleToken.decimals;
        const inAmount = parseInt(route.swapInfo.inAmount) / Math.pow(10, inDecimals);
        const outAmount = parseInt(route.swapInfo.outAmount) / Math.pow(10, outDecimals);
        
        console.log(`      ${inAmount.toFixed(inDecimals)} ${opportunity.startToken.symbol} -> ${outAmount.toFixed(outDecimals)} ${opportunity.middleToken.symbol}`);
      }
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏
      if (route.swapInfo.feeAmount && route.swapInfo.feeMint) {
        const isUSDC = route.swapInfo.feeMint === USDC;
        const isSOL = route.swapInfo.feeMint === SOL;
        const feeDecimals = isSOL ? 9 : 6;
        const feeMintName = isSOL ? 'SOL' : (isUSDC ? 'USDC' : route.swapInfo.feeMint.slice(0, 6) + '...');
        const feeAmount = parseInt(route.swapInfo.feeAmount) / Math.pow(10, feeDecimals);
        
        console.log(`      –ö–æ–º–∏—Å—Å–∏—è: ${feeAmount.toFixed(feeDecimals)} ${feeMintName}`);
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ DEX
    console.log(`\n    üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ DEX:`);
    for (const [dexName, stats] of Object.entries(dexSummary)) {
      console.log(`      ‚Ä¢ ${dexName}: ${stats.percent}%`);
    }
  } else {
    console.log(`    –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ`);
  }
  
  // –í—Ç–æ—Ä–æ–π –º–∞—Ä—à—Ä—É—Ç: B -> A (USDC -> SOL)
  console.log(`\n  2Ô∏è‚É£ ${opportunity.middleToken.symbol} -> ${opportunity.startToken.symbol}:`);
  if (opportunity.secondQuote.routePlan && opportunity.secondQuote.routePlan.length > 0) {
    // –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ DEX
    const dexSummary: Record<string, { percent: number }> = {};
    
    for (const route of opportunity.secondQuote.routePlan) {
      const dexName = route.swapInfo.label || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π DEX';
      if (!dexSummary[dexName]) {
        dexSummary[dexName] = { percent: 0 };
      }
      dexSummary[dexName].percent += route.percent;
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ –º–∞—Ä—à—Ä—É—Ç–∞
      console.log(`    ‚Ä¢ ${dexName} (${route.percent}%):`);
      
      if (route.swapInfo.inAmount && route.swapInfo.outAmount) {
        const inDecimals = opportunity.middleToken.decimals;
        const outDecimals = opportunity.startToken.decimals;
        const inAmount = parseInt(route.swapInfo.inAmount) / Math.pow(10, inDecimals);
        const outAmount = parseInt(route.swapInfo.outAmount) / Math.pow(10, outDecimals);
        
        console.log(`      ${inAmount.toFixed(inDecimals)} ${opportunity.middleToken.symbol} -> ${outAmount.toFixed(outDecimals)} ${opportunity.startToken.symbol}`);
      }
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏
      if (route.swapInfo.feeAmount && route.swapInfo.feeMint) {
        const isUSDC = route.swapInfo.feeMint === USDC;
        const isSOL = route.swapInfo.feeMint === SOL;
        const feeDecimals = isSOL ? 9 : 6;
        const feeMintName = isSOL ? 'SOL' : (isUSDC ? 'USDC' : route.swapInfo.feeMint.slice(0, 6) + '...');
        const feeAmount = parseInt(route.swapInfo.feeAmount) / Math.pow(10, feeDecimals);
        
        console.log(`      –ö–æ–º–∏—Å—Å–∏—è: ${feeAmount.toFixed(feeDecimals)} ${feeMintName}`);
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ DEX
    console.log(`\n    üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ DEX:`);
    for (const [dexName, stats] of Object.entries(dexSummary)) {
      console.log(`      ‚Ä¢ ${dexName}: ${stats.percent}%`);
    }
  } else {
    console.log(`    –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ`);
  }
  
  // –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
  console.log(`\nüïí –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: ${new Date(opportunity.timestamp).toISOString()}`);
  console.log('==================================================');
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–µ–∂–¥—É SOL –∏ USDC
 * @param interval –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @param maxIterations –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
 */
async function startArbitrageMonitoring(
  intervalMs: number = 5000,
  maxIterations: number = 0
): Promise<void> {
  let iterations = 0;
  let isRunning = true;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏ Ctrl+C
  process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...');
    isRunning = false;
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    setTimeout(() => {
      console.log('üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    }, 500);
  });
  
  // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (1 SOL)
  const startAmount = 1;
  
  console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:');
  console.log(`  ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${intervalMs / 1000} —Å–µ–∫.`);
  console.log(`  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: ${maxIterations === 0 ? '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ' : maxIterations}`);
  console.log(`  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${MIN_PROFIT_PERCENT}%`);
  console.log(`  ‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${startAmount} SOL`);
  console.log(`\nüëâ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n`);
  
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  while (isRunning && (maxIterations === 0 || iterations < maxIterations)) {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π
    iterations++;
    
    console.log(`\nüîç –ò—Ç–µ—Ä–∞—Ü–∏—è ${iterations}${maxIterations > 0 ? `/${maxIterations}` : ''}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å SOL -> USDC -> SOL
      const opportunity = await checkArbitrageOpportunity(
        TOKENS.SOL,
        TOKENS.USDC,
        startAmount
      );
      
      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (opportunity) {
        displayArbitrageOpportunity(opportunity);
      }
      
      // –û–∂–∏–¥–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
      if (isRunning && (maxIterations === 0 || iterations < maxIterations)) {
        console.log(`\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${intervalMs / 1000} —Å–µ–∫. –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...`);
        await new Promise(resolve => setTimeout(resolve, intervalMs));
      }
    } catch (error) {
      console.error(`üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:`, error);
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (isRunning && (maxIterations === 0 || iterations < maxIterations)) {
        await new Promise(resolve => setTimeout(resolve, intervalMs));
      }
    }
  }
  
  console.log(`\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ ${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π`);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
  startArbitrageMonitoring,
  checkArbitrageOpportunity,
  getQuote,
  TOKENS,
  MIN_PROFIT_PERCENT,
  ArbitrageOpportunity
};

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
if (require.main === module) {
  startArbitrageMonitoring(5000, 3); // 5 —Å–µ–∫—É–Ω–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª, 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏
} 