import { startArbitrageMonitoring, MIN_PROFIT_PERCENT, TOKENS } from './arbitrage';

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞
 */
const DEFAULT_CONFIG = {
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  intervalMs: 5000,
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
  maxIterations: 0,
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  minProfitPercent: MIN_PROFIT_PERCENT
};

/**
 * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
function printUsage(): void {
  console.log(`
ü§ñ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è Solana (Jupiter API)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm start -- [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --interval=—á–∏—Å–ª–æ   –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${DEFAULT_CONFIG.intervalMs / 1000})
  --iterations=—á–∏—Å–ª–æ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${DEFAULT_CONFIG.maxIterations === 0 ? '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ' : DEFAULT_CONFIG.maxIterations})
  --profit=—á–∏—Å–ª–æ     –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${DEFAULT_CONFIG.minProfitPercent})
  --help, -h         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npm start
  npm start -- --interval=10 --iterations=5
  npm start -- --profit=0.8
  `);
}

/**
 * –ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseCommandLineArgs(): { interval: number, iterations: number, profit: number } {
  const args = process.argv.slice(2);
  const config = { ...DEFAULT_CONFIG };
  
  for (const arg of args) {
    if (arg === '--help' || arg === '-h') {
      printUsage();
      process.exit(0);
    }
    
    const intervalMatch = arg.match(/^--interval=(\d+(\.\d+)?)$/);
    if (intervalMatch) {
      const value = parseFloat(intervalMatch[1]);
      if (!isNaN(value) && value > 0) {
        config.intervalMs = value * 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞: –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      continue;
    }
    
    const iterationsMatch = arg.match(/^--iterations=(\d+)$/);
    if (iterationsMatch) {
      const value = parseInt(iterationsMatch[1], 10);
      if (!isNaN(value) && value >= 0) {
        config.maxIterations = value;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º');
      }
      continue;
    }
    
    const profitMatch = arg.match(/^--profit=(\d+(\.\d+)?)$/);
    if (profitMatch) {
      const value = parseFloat(profitMatch[1]);
      if (!isNaN(value) && value >= 0) {
        config.minProfitPercent = value;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      continue;
    }
  }
  
  return {
    interval: config.intervalMs,
    iterations: config.maxIterations,
    profit: config.minProfitPercent
  };
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞
 */
async function main(): Promise<void> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ Solana...');
  
  // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const { interval, iterations, profit } = parseCommandLineArgs();
  
  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
  console.log('\nüí± –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:');
  for (const [key, token] of Object.entries(TOKENS)) {
    console.log(`  ‚Ä¢ ${token.symbol} (${token.address.slice(0, 6)}...${token.address.slice(-6)})`);
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—É—Å–∫–∞
  console.log('\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:');
  console.log(`  ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${interval / 1000} —Å–µ–∫—É–Ω–¥`);
  console.log(`  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: ${iterations === 0 ? '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ' : iterations}`);
  console.log(`  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${profit}%`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  await startArbitrageMonitoring(interval, iterations);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
main().catch((error) => {
  console.error('üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 