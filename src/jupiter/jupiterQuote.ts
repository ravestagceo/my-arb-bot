import fetch from 'node-fetch';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API –∏ —Ç–æ–∫–µ–Ω–æ–≤
const JUPITER_API_URL = 'https://quote-api.jup.ag/v6/quote';
const SOL = 'So11111111111111111111111111111111111111112';
const USDC = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v';

// –ê–¥—Ä–µ—Å–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö DEX-–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
const DEX_NAMES: Record<string, string> = {
  'So11111111111111111111111111111111111111112': 'SOL',
  'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v': 'USDC',
  'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB': 'USDT'
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
interface MarketInfo {
  id?: string;
  label?: string;
  ammKey?: string;
  inputMint?: string;
  outputMint?: string;
  inAmount?: string;
  outAmount?: string;
  feeAmount?: string;
  feeMint?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –æ–±–º–µ–Ω–∞
interface RoutePlan {
  swapInfo: MarketInfo;
  percent: number;
}

// –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ Jupiter API
interface JupiterQuoteResponse {
  inputMint: string;
  inAmount: string;
  outputMint: string;
  outAmount: string;
  otherAmountThreshold: string;
  swapMode: string;
  slippageBps: number;
  priceImpactPct: string;
  routePlan: RoutePlan[];
  contextSlot: number;
  timeTaken: number;
  error?: string;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Jupiter API 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ USDC –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ 1 SOL
 * @param retries –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * @returns –î–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
async function getQuote(
  amount: number = 1 * 1_000_000_000, // 1 SOL –≤ lamports
  slippageBps: number = 50, // 0.5% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
  retries: number = 3
): Promise<JupiterQuoteResponse | null> {
  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
  const url = `${JUPITER_API_URL}?inputMint=${SOL}&outputMint=${USDC}&amount=${amount}&slippageBps=${slippageBps}`;

  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–æ retries —Ä–∞–∑
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`[${new Date().toISOString()}] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ SOL ‚Üí USDC...`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
      const startTime = performance.now();
      const response = await fetch(url);
      const endTime = performance.now();
      const requestTime = endTime - startTime;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (!response.ok) {
        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
      const data = await response.json() as JupiterQuoteResponse;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
      if (data.error) {
        console.error(`Jupiter API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${data.error}`);
        if (attempt < retries) {
          console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...`);
          await new Promise(r => setTimeout(r, 1000));
          continue;
        }
        return null;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ outAmount –≤ –æ—Ç–≤–µ—Ç–µ
      if (!data.outAmount) {
        console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç –æ–±–º–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries})`);
        if (attempt < retries) {
          console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...`);
          await new Promise(r => setTimeout(r, 1000));
          continue;
        }
        return null;
      }
      
      // –ó–∞–º–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è HTTP –∑–∞–ø—Ä–æ—Å–∞: ${requestTime.toFixed(2)} –º—Å`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
      return data;
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}):`, error);
      
      if (attempt < retries) {
        console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...`);
        await new Promise(r => setTimeout(r, 1000));
      }
    }
  }
  
  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`);
  return null;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –≤–∏–¥
 */
function formatTokenAmount(amount: string, decimals: number = 6): string {
  const value = parseInt(amount) / Math.pow(10, decimals);
  return value.toFixed(decimals);
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±–º–µ–Ω–Ω—ã–π –∫—É—Ä—Å
 */
function calculateExchangeRate(inAmount: string, outAmount: string, inDecimals: number = 9, outDecimals: number = 6): string {
  const inValue = parseInt(inAmount) / Math.pow(10, inDecimals);
  const outValue = parseInt(outAmount) / Math.pow(10, outDecimals);
  const rate = outValue / inValue;
  return rate.toFixed(4);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞
 */
function getTokenName(mintAddress: string): string {
  return DEX_NAMES[mintAddress] || mintAddress.slice(0, 4) + '...' + mintAddress.slice(-4);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
 */
function displayQuote(quote: JupiterQuoteResponse): void {
  // –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
  console.log('\n‚úÖ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞:');
  
  const solAmount = formatTokenAmount(quote.inAmount, 9);
  const usdcAmount = formatTokenAmount(quote.outAmount, 6);
  const exchangeRate = calculateExchangeRate(quote.inAmount, quote.outAmount);
  
  console.log(`üîÑ ${solAmount} SOL = ${usdcAmount} USDC (–∫—É—Ä—Å: 1 SOL = ${exchangeRate} USDC)`);
  
  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–∏
  const priceImpact = parseFloat(quote.priceImpactPct) * 100;
  console.log(`üìâ –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: ${priceImpact.toFixed(6)}%`);
  
  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ USD
  console.log(`üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏: ~$${usdcAmount}`);
  
  // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ –∏ DEX
  console.log('\nüìä –ú–∞—Ä—à—Ä—É—Ç –æ–±–º–µ–Ω–∞:');
  
  if (quote.routePlan && quote.routePlan.length > 0) {
    // –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∫–æ–º–∏—Å—Å–∏–π
    let totalFees = 0;
    const fees: Record<string, number> = {};
    
    for (let i = 0; i < quote.routePlan.length; i++) {
      const { swapInfo, percent } = quote.routePlan[i];
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ –º–∞—Ä—à—Ä—É—Ç–∞
      console.log(`  ${i + 1}. ${swapInfo.label || 'Unknown DEX'} (${percent}%)`);
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥—è—â–µ–º –∏ –∏—Å—Ö–æ–¥—è—â–µ–º —Ç–æ–∫–µ–Ω–µ
      if (swapInfo.inAmount && swapInfo.outAmount) {
        const inToken = getTokenName(swapInfo.inputMint || '');
        const outToken = getTokenName(swapInfo.outputMint || '');
        
        const inAmountFormatted = formatTokenAmount(
          swapInfo.inAmount, 
          inToken === 'SOL' ? 9 : 6
        );
        
        const outAmountFormatted = formatTokenAmount(
          swapInfo.outAmount, 
          outToken === 'SOL' ? 9 : 6
        );
        
        console.log(`     –û–±–º–µ–Ω: ${inAmountFormatted} ${inToken} ‚Üí ${outAmountFormatted} ${outToken}`);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        const stepRate = calculateExchangeRate(
          swapInfo.inAmount, 
          swapInfo.outAmount,
          inToken === 'SOL' ? 9 : 6,
          outToken === 'SOL' ? 9 : 6
        );
        
        console.log(`     –ö—É—Ä—Å: 1 ${inToken} = ${stepRate} ${outToken}`);
      }
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏–∏
      if (swapInfo.feeAmount && swapInfo.feeMint) {
        const feeMintName = getTokenName(swapInfo.feeMint);
        const feeDecimals = feeMintName === 'SOL' ? 9 : 6;
        const feeAmountFormatted = formatTokenAmount(swapInfo.feeAmount, feeDecimals);
        
        console.log(`     –ö–æ–º–∏—Å—Å–∏—è: ${feeAmountFormatted} ${feeMintName}`);
        
        // –°—É–º–º–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ —Ç–∏–ø–∞–º —Ç–æ–∫–µ–Ω–æ–≤
        const feeValue = parseInt(swapInfo.feeAmount) / Math.pow(10, feeDecimals);
        if (!fees[feeMintName]) {
          fees[feeMintName] = 0;
        }
        fees[feeMintName] += feeValue;
        
        // –ï—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏—è –≤ USDC –∏–ª–∏ USDT, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ USD
        if (feeMintName === 'USDC' || feeMintName === 'USDT') {
          totalFees += feeValue;
        }
      }
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DEX
      if (swapInfo.ammKey) {
        console.log(`     ID DEX: ${swapInfo.ammKey.slice(0, 8)}...${swapInfo.ammKey.slice(-8)}`);
      }
      
      // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      if (i < quote.routePlan.length - 1) {
        console.log(`     ‚Üì`);
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—É–º–º–∞—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
    console.log(`\nüí∏ –°—É–º–º–∞—Ä–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏:`);
    for (const [token, amount] of Object.entries(fees)) {
      console.log(`  ‚Ä¢ ${amount.toFixed(6)} ${token}`);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –≤ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if (totalFees > 0) {
      console.log(`  ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–π: ~$${totalFees.toFixed(6)}`);
    }
  } else {
    console.log('  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  }
  
  // –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  console.log(`\n‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ API: ${(quote.timeTaken * 1000).toFixed(2)} –º—Å`);
  console.log(`üì¶ –°–ª–æ—Ç –±–ª–æ–∫—á–µ–π–Ω–∞: ${quote.contextSlot}`);
  console.log(`üïí –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: ${new Date().toISOString()}\n`);
}

/**
 * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç Jupiter API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
 * @param intervalMs –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @param maxIterations –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
 */
async function startPriceMonitoring(intervalMs: number = 1000, maxIterations: number = 0): Promise<void> {
  let iterations = 0;
  let isRunning = true;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏ Ctrl+C
  process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω...');
    isRunning = false;
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    setTimeout(() => {
      console.log('üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    }, 500);
  });
  
  console.log(`\nüîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω SOL ‚Üí USDC —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${intervalMs / 1000} —Å–µ–∫...`);
  console.log(`üëâ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n`);
  
  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
  const priceHistory: {timestamp: number, price: number}[] = [];
  
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  while (isRunning && (maxIterations === 0 || iterations < maxIterations)) {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π
    iterations++;
    
    // –¢–∞–π–º–µ—Ä –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const startTime = Date.now();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É
      const quote = await getQuote();
      
      if (quote) {
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–∏—Ä–æ–≤–∫–µ
        displayQuote(quote);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ
        const price = parseInt(quote.outAmount) / 1_000_000;
        priceHistory.push({
          timestamp: Date.now(),
          price: price
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–µ–Ω
        if (priceHistory.length > 10) {
          priceHistory.shift();
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        if (priceHistory.length >= 2) {
          const lastPrice = priceHistory[priceHistory.length - 1].price;
          const prevPrice = priceHistory[priceHistory.length - 2].price;
          const priceDiff = lastPrice - prevPrice;
          const priceDiffPercent = (priceDiff / prevPrice) * 100;
          
          let changeIndicator = '‚Üí';
          if (priceDiff > 0) changeIndicator = '‚ÜóÔ∏è';
          if (priceDiff < 0) changeIndicator = '‚ÜòÔ∏è';
          
          console.log(`${changeIndicator} –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${priceDiffPercent > 0 ? '+' : ''}${priceDiffPercent.toFixed(6)}%`);
        }
      } else {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É (–∏—Ç–µ—Ä–∞—Ü–∏—è ${iterations})`);
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const elapsedTime = Date.now() - startTime;
      const remainingTime = Math.max(0, intervalMs - elapsedTime);
      
      if (remainingTime > 0 && isRunning && (maxIterations === 0 || iterations < maxIterations)) {
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${remainingTime}–º—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...\n`);
        await new Promise(resolve => setTimeout(resolve, remainingTime));
      }
    } catch (error) {
      console.error(`üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:`, error);
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (isRunning && (maxIterations === 0 || iterations < maxIterations)) {
        await new Promise(resolve => setTimeout(resolve, intervalMs));
      }
    }
  }
  
  console.log(`\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ ${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫—É–Ω–¥–∞
// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏–º 5 –∏—Ç–µ—Ä–∞—Ü–∏–π, –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
startPriceMonitoring(1000, 5);